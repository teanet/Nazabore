// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: ProtoModels/protocol.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Sex: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unknownSex // = 0
  case male // = 1
  case female // = 2

  init() {
    self = .unknownSex
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknownSex
    case 1: self = .male
    case 2: self = .female
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .unknownSex: return 0
    case .male: return 1
    case .female: return 2
    }
  }

}

struct Timestamp: SwiftProtobuf.Message {
  static let protoMessageName: String = "Timestamp"

  var value: Int64 {
    get {return _value ?? 0}
    set {_value = newValue}
  }
  /// Returns true if `value` has been explicitly set.
  var hasValue: Bool {return self._value != nil}
  /// Clears the value of `value`. Subsequent reads from it will return its default value.
  mutating func clearValue() {self._value = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  public var isInitialized: Bool {
    if self._value == nil {return false}
    return true
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self._value)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._value {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _value: Int64? = nil
}

struct DevicePlatformType: SwiftProtobuf.Message {
  static let protoMessageName: String = "DevicePlatformType"

  /// 1 – Ios
  /// 2 – Android
  var value: Int32 {
    get {return _value ?? 0}
    set {_value = newValue}
  }
  /// Returns true if `value` has been explicitly set.
  var hasValue: Bool {return self._value != nil}
  /// Clears the value of `value`. Subsequent reads from it will return its default value.
  mutating func clearValue() {self._value = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  public var isInitialized: Bool {
    if self._value == nil {return false}
    return true
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self._value)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._value {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _value: Int32? = nil
}

struct AuthProviderType: SwiftProtobuf.Message {
  static let protoMessageName: String = "AuthProviderType"

  /// 1 – Vk
  /// 2 – Facebook
  /// 3 – Google
  var value: Int32 {
    get {return _value ?? 0}
    set {_value = newValue}
  }
  /// Returns true if `value` has been explicitly set.
  var hasValue: Bool {return self._value != nil}
  /// Clears the value of `value`. Subsequent reads from it will return its default value.
  mutating func clearValue() {self._value = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  public var isInitialized: Bool {
    if self._value == nil {return false}
    return true
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self._value)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._value {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _value: Int32? = nil
}

struct GeoPoint: SwiftProtobuf.Message {
  static let protoMessageName: String = "GeoPoint"

  var lon: Double {
    get {return _lon ?? 0}
    set {_lon = newValue}
  }
  /// Returns true if `lon` has been explicitly set.
  var hasLon: Bool {return self._lon != nil}
  /// Clears the value of `lon`. Subsequent reads from it will return its default value.
  mutating func clearLon() {self._lon = nil}

  var lat: Double {
    get {return _lat ?? 0}
    set {_lat = newValue}
  }
  /// Returns true if `lat` has been explicitly set.
  var hasLat: Bool {return self._lat != nil}
  /// Clears the value of `lat`. Subsequent reads from it will return its default value.
  mutating func clearLat() {self._lat = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  public var isInitialized: Bool {
    if self._lon == nil {return false}
    if self._lat == nil {return false}
    return true
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularDoubleField(value: &self._lon)
      case 2: try decoder.decodeSingularDoubleField(value: &self._lat)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._lon {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 1)
    }
    if let v = self._lat {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _lon: Double? = nil
  fileprivate var _lat: Double? = nil
}

struct Bound: SwiftProtobuf.Message {
  static let protoMessageName: String = "Bound"

  var leftTop: GeoPoint {
    get {return _storage._leftTop ?? GeoPoint()}
    set {_uniqueStorage()._leftTop = newValue}
  }
  /// Returns true if `leftTop` has been explicitly set.
  var hasLeftTop: Bool {return _storage._leftTop != nil}
  /// Clears the value of `leftTop`. Subsequent reads from it will return its default value.
  mutating func clearLeftTop() {_storage._leftTop = nil}

  var rightBottom: GeoPoint {
    get {return _storage._rightBottom ?? GeoPoint()}
    set {_uniqueStorage()._rightBottom = newValue}
  }
  /// Returns true if `rightBottom` has been explicitly set.
  var hasRightBottom: Bool {return _storage._rightBottom != nil}
  /// Clears the value of `rightBottom`. Subsequent reads from it will return its default value.
  mutating func clearRightBottom() {_storage._rightBottom = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._leftTop == nil {return false}
      if _storage._rightBottom == nil {return false}
      if let v = _storage._leftTop, !v.isInitialized {return false}
      if let v = _storage._rightBottom, !v.isInitialized {return false}
      return true
    }
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._leftTop)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._rightBottom)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._leftTop {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._rightBottom {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Image: SwiftProtobuf.Message {
  static let protoMessageName: String = "Image"

  var url: String {
    get {return _url ?? String()}
    set {_url = newValue}
  }
  /// Returns true if `url` has been explicitly set.
  var hasURL: Bool {return self._url != nil}
  /// Clears the value of `url`. Subsequent reads from it will return its default value.
  mutating func clearURL() {self._url = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  public var isInitialized: Bool {
    if self._url == nil {return false}
    return true
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._url)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._url {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _url: String? = nil
}

struct Icon: SwiftProtobuf.Message {
  static let protoMessageName: String = "Icon"

  var icon: String {
    get {return _storage._icon ?? String()}
    set {_uniqueStorage()._icon = newValue}
  }
  /// Returns true if `icon` has been explicitly set.
  var hasIcon: Bool {return _storage._icon != nil}
  /// Clears the value of `icon`. Subsequent reads from it will return its default value.
  mutating func clearIcon() {_storage._icon = nil}

  var image: Image {
    get {return _storage._image ?? Image()}
    set {_uniqueStorage()._image = newValue}
  }
  /// Returns true if `image` has been explicitly set.
  var hasImage: Bool {return _storage._image != nil}
  /// Clears the value of `image`. Subsequent reads from it will return its default value.
  mutating func clearImage() {_storage._image = nil}

  var emoji: String {
    get {return _storage._emoji ?? String()}
    set {_uniqueStorage()._emoji = newValue}
  }
  /// Returns true if `emoji` has been explicitly set.
  var hasEmoji: Bool {return _storage._emoji != nil}
  /// Clears the value of `emoji`. Subsequent reads from it will return its default value.
  mutating func clearEmoji() {_storage._emoji = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._image, !v.isInitialized {return false}
      return true
    }
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._icon)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._image)
        case 3: try decoder.decodeSingularStringField(value: &_storage._emoji)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._icon {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      }
      if let v = _storage._image {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._emoji {
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct AddLocationRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = "AddLocationRequest"

  var location: GeoPoint {
    get {return _storage._location ?? GeoPoint()}
    set {_uniqueStorage()._location = newValue}
  }
  /// Returns true if `location` has been explicitly set.
  var hasLocation: Bool {return _storage._location != nil}
  /// Clears the value of `location`. Subsequent reads from it will return its default value.
  mutating func clearLocation() {_storage._location = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._location == nil {return false}
      if let v = _storage._location, !v.isInitialized {return false}
      return true
    }
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._location)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._location {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct AddPushTokenRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = "AddPushTokenRequest"

  var platform: DevicePlatformType {
    get {return _storage._platform ?? DevicePlatformType()}
    set {_uniqueStorage()._platform = newValue}
  }
  /// Returns true if `platform` has been explicitly set.
  var hasPlatform: Bool {return _storage._platform != nil}
  /// Clears the value of `platform`. Subsequent reads from it will return its default value.
  mutating func clearPlatform() {_storage._platform = nil}

  var token: String {
    get {return _storage._token ?? String()}
    set {_uniqueStorage()._token = newValue}
  }
  /// Returns true if `token` has been explicitly set.
  var hasToken: Bool {return _storage._token != nil}
  /// Clears the value of `token`. Subsequent reads from it will return its default value.
  mutating func clearToken() {_storage._token = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._platform == nil {return false}
      if _storage._token == nil {return false}
      if let v = _storage._platform, !v.isInitialized {return false}
      return true
    }
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._platform)
        case 2: try decoder.decodeSingularStringField(value: &_storage._token)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._platform {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._token {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct AddPlaceRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = "AddPlaceRequest"

  var location: GeoPoint {
    get {return _storage._location ?? GeoPoint()}
    set {_uniqueStorage()._location = newValue}
  }
  /// Returns true if `location` has been explicitly set.
  var hasLocation: Bool {return _storage._location != nil}
  /// Clears the value of `location`. Subsequent reads from it will return its default value.
  mutating func clearLocation() {_storage._location = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._location == nil {return false}
      if let v = _storage._location, !v.isInitialized {return false}
      return true
    }
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._location)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._location {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct AddVisitedPlaceRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = "AddVisitedPlaceRequest"

  var location: GeoPoint {
    get {return _storage._location ?? GeoPoint()}
    set {_uniqueStorage()._location = newValue}
  }
  /// Returns true if `location` has been explicitly set.
  var hasLocation: Bool {return _storage._location != nil}
  /// Clears the value of `location`. Subsequent reads from it will return its default value.
  mutating func clearLocation() {_storage._location = nil}

  var accuracy: Double {
    get {return _storage._accuracy ?? 0}
    set {_uniqueStorage()._accuracy = newValue}
  }
  /// Returns true if `accuracy` has been explicitly set.
  var hasAccuracy: Bool {return _storage._accuracy != nil}
  /// Clears the value of `accuracy`. Subsequent reads from it will return its default value.
  mutating func clearAccuracy() {_storage._accuracy = nil}

  var enterTime: Timestamp {
    get {return _storage._enterTime ?? Timestamp()}
    set {_uniqueStorage()._enterTime = newValue}
  }
  /// Returns true if `enterTime` has been explicitly set.
  var hasEnterTime: Bool {return _storage._enterTime != nil}
  /// Clears the value of `enterTime`. Subsequent reads from it will return its default value.
  mutating func clearEnterTime() {_storage._enterTime = nil}

  var leaveTime: Timestamp {
    get {return _storage._leaveTime ?? Timestamp()}
    set {_uniqueStorage()._leaveTime = newValue}
  }
  /// Returns true if `leaveTime` has been explicitly set.
  var hasLeaveTime: Bool {return _storage._leaveTime != nil}
  /// Clears the value of `leaveTime`. Subsequent reads from it will return its default value.
  mutating func clearLeaveTime() {_storage._leaveTime = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._location == nil {return false}
      if _storage._accuracy == nil {return false}
      if let v = _storage._location, !v.isInitialized {return false}
      if let v = _storage._enterTime, !v.isInitialized {return false}
      if let v = _storage._leaveTime, !v.isInitialized {return false}
      return true
    }
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._location)
        case 2: try decoder.decodeSingularDoubleField(value: &_storage._accuracy)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._enterTime)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._leaveTime)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._location {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._accuracy {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 2)
      }
      if let v = _storage._enterTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._leaveTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct AddAuthRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = "AddAuthRequest"

  var provider: AuthProviderType {
    get {return _storage._provider ?? AuthProviderType()}
    set {_uniqueStorage()._provider = newValue}
  }
  /// Returns true if `provider` has been explicitly set.
  var hasProvider: Bool {return _storage._provider != nil}
  /// Clears the value of `provider`. Subsequent reads from it will return its default value.
  mutating func clearProvider() {_storage._provider = nil}

  var id: String {
    get {return _storage._id ?? String()}
    set {_uniqueStorage()._id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  var hasID: Bool {return _storage._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  mutating func clearID() {_storage._id = nil}

  var token: String {
    get {return _storage._token ?? String()}
    set {_uniqueStorage()._token = newValue}
  }
  /// Returns true if `token` has been explicitly set.
  var hasToken: Bool {return _storage._token != nil}
  /// Clears the value of `token`. Subsequent reads from it will return its default value.
  mutating func clearToken() {_storage._token = nil}

  var email: String {
    get {return _storage._email ?? String()}
    set {_uniqueStorage()._email = newValue}
  }
  /// Returns true if `email` has been explicitly set.
  var hasEmail: Bool {return _storage._email != nil}
  /// Clears the value of `email`. Subsequent reads from it will return its default value.
  mutating func clearEmail() {_storage._email = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._provider == nil {return false}
      if _storage._id == nil {return false}
      if _storage._token == nil {return false}
      if let v = _storage._provider, !v.isInitialized {return false}
      return true
    }
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._provider)
        case 2: try decoder.decodeSingularStringField(value: &_storage._id)
        case 3: try decoder.decodeSingularStringField(value: &_storage._token)
        case 4: try decoder.decodeSingularStringField(value: &_storage._email)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._provider {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._id {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      }
      if let v = _storage._token {
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      }
      if let v = _storage._email {
        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct AddMarkerRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = "AddMarkerRequest"

  var location: GeoPoint {
    get {return _storage._location ?? GeoPoint()}
    set {_uniqueStorage()._location = newValue}
  }
  /// Returns true if `location` has been explicitly set.
  var hasLocation: Bool {return _storage._location != nil}
  /// Clears the value of `location`. Subsequent reads from it will return its default value.
  mutating func clearLocation() {_storage._location = nil}

  var icon: Icon {
    get {return _storage._icon ?? Icon()}
    set {_uniqueStorage()._icon = newValue}
  }
  /// Returns true if `icon` has been explicitly set.
  var hasIcon: Bool {return _storage._icon != nil}
  /// Clears the value of `icon`. Subsequent reads from it will return its default value.
  mutating func clearIcon() {_storage._icon = nil}

  var message: String {
    get {return _storage._message ?? String()}
    set {_uniqueStorage()._message = newValue}
  }
  /// Returns true if `message` has been explicitly set.
  var hasMessage: Bool {return _storage._message != nil}
  /// Clears the value of `message`. Subsequent reads from it will return its default value.
  mutating func clearMessage() {_storage._message = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._location == nil {return false}
      if _storage._icon == nil {return false}
      if _storage._message == nil {return false}
      if let v = _storage._location, !v.isInitialized {return false}
      if let v = _storage._icon, !v.isInitialized {return false}
      return true
    }
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._location)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._icon)
        case 3: try decoder.decodeSingularStringField(value: &_storage._message)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._location {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._icon {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._message {
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct MarkerUser: SwiftProtobuf.Message {
  static let protoMessageName: String = "MarkerUser"

  var id: Int64 {
    get {return _storage._id ?? 0}
    set {_uniqueStorage()._id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  var hasID: Bool {return _storage._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  mutating func clearID() {_storage._id = nil}

  var login: String {
    get {return _storage._login ?? String()}
    set {_uniqueStorage()._login = newValue}
  }
  /// Returns true if `login` has been explicitly set.
  var hasLogin: Bool {return _storage._login != nil}
  /// Clears the value of `login`. Subsequent reads from it will return its default value.
  mutating func clearLogin() {_storage._login = nil}

  var name: String {
    get {return _storage._name ?? String()}
    set {_uniqueStorage()._name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  var hasName: Bool {return _storage._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  mutating func clearName() {_storage._name = nil}

  var avatar: Image {
    get {return _storage._avatar ?? Image()}
    set {_uniqueStorage()._avatar = newValue}
  }
  /// Returns true if `avatar` has been explicitly set.
  var hasAvatar: Bool {return _storage._avatar != nil}
  /// Clears the value of `avatar`. Subsequent reads from it will return its default value.
  mutating func clearAvatar() {_storage._avatar = nil}

  var rating: Double {
    get {return _storage._rating ?? 0}
    set {_uniqueStorage()._rating = newValue}
  }
  /// Returns true if `rating` has been explicitly set.
  var hasRating: Bool {return _storage._rating != nil}
  /// Clears the value of `rating`. Subsequent reads from it will return its default value.
  mutating func clearRating() {_storage._rating = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id == nil {return false}
      if _storage._login == nil {return false}
      if _storage._name == nil {return false}
      if _storage._avatar == nil {return false}
      if _storage._rating == nil {return false}
      if let v = _storage._avatar, !v.isInitialized {return false}
      return true
    }
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt64Field(value: &_storage._id)
        case 2: try decoder.decodeSingularStringField(value: &_storage._login)
        case 3: try decoder.decodeSingularStringField(value: &_storage._name)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._avatar)
        case 5: try decoder.decodeSingularDoubleField(value: &_storage._rating)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._id {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 1)
      }
      if let v = _storage._login {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      }
      if let v = _storage._name {
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      }
      if let v = _storage._avatar {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._rating {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Marker: SwiftProtobuf.Message {
  static let protoMessageName: String = "Marker"

  var id: Int64 {
    get {return _storage._id ?? 0}
    set {_uniqueStorage()._id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  var hasID: Bool {return _storage._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  mutating func clearID() {_storage._id = nil}

  var author: MarkerUser {
    get {return _storage._author ?? MarkerUser()}
    set {_uniqueStorage()._author = newValue}
  }
  /// Returns true if `author` has been explicitly set.
  var hasAuthor: Bool {return _storage._author != nil}
  /// Clears the value of `author`. Subsequent reads from it will return its default value.
  mutating func clearAuthor() {_storage._author = nil}

  var location: GeoPoint {
    get {return _storage._location ?? GeoPoint()}
    set {_uniqueStorage()._location = newValue}
  }
  /// Returns true if `location` has been explicitly set.
  var hasLocation: Bool {return _storage._location != nil}
  /// Clears the value of `location`. Subsequent reads from it will return its default value.
  mutating func clearLocation() {_storage._location = nil}

  var icon: Icon {
    get {return _storage._icon ?? Icon()}
    set {_uniqueStorage()._icon = newValue}
  }
  /// Returns true if `icon` has been explicitly set.
  var hasIcon: Bool {return _storage._icon != nil}
  /// Clears the value of `icon`. Subsequent reads from it will return its default value.
  mutating func clearIcon() {_storage._icon = nil}

  var message: String {
    get {return _storage._message ?? String()}
    set {_uniqueStorage()._message = newValue}
  }
  /// Returns true if `message` has been explicitly set.
  var hasMessage: Bool {return _storage._message != nil}
  /// Clears the value of `message`. Subsequent reads from it will return its default value.
  mutating func clearMessage() {_storage._message = nil}

  var count: Int32 {
    get {return _storage._count ?? 0}
    set {_uniqueStorage()._count = newValue}
  }
  /// Returns true if `count` has been explicitly set.
  var hasCount: Bool {return _storage._count != nil}
  /// Clears the value of `count`. Subsequent reads from it will return its default value.
  mutating func clearCount() {_storage._count = nil}

  var rating: Double {
    get {return _storage._rating ?? 0}
    set {_uniqueStorage()._rating = newValue}
  }
  /// Returns true if `rating` has been explicitly set.
  var hasRating: Bool {return _storage._rating != nil}
  /// Clears the value of `rating`. Subsequent reads from it will return its default value.
  mutating func clearRating() {_storage._rating = nil}

  var upVotes: Int32 {
    get {return _storage._upVotes ?? 0}
    set {_uniqueStorage()._upVotes = newValue}
  }
  /// Returns true if `upVotes` has been explicitly set.
  var hasUpVotes: Bool {return _storage._upVotes != nil}
  /// Clears the value of `upVotes`. Subsequent reads from it will return its default value.
  mutating func clearUpVotes() {_storage._upVotes = nil}

  var downVotes: Int32 {
    get {return _storage._downVotes ?? 0}
    set {_uniqueStorage()._downVotes = newValue}
  }
  /// Returns true if `downVotes` has been explicitly set.
  var hasDownVotes: Bool {return _storage._downVotes != nil}
  /// Clears the value of `downVotes`. Subsequent reads from it will return its default value.
  mutating func clearDownVotes() {_storage._downVotes = nil}

  var commentsCount: Int32 {
    get {return _storage._commentsCount ?? 0}
    set {_uniqueStorage()._commentsCount = newValue}
  }
  /// Returns true if `commentsCount` has been explicitly set.
  var hasCommentsCount: Bool {return _storage._commentsCount != nil}
  /// Clears the value of `commentsCount`. Subsequent reads from it will return its default value.
  mutating func clearCommentsCount() {_storage._commentsCount = nil}

  var createdAt: Timestamp {
    get {return _storage._createdAt ?? Timestamp()}
    set {_uniqueStorage()._createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  var hasCreatedAt: Bool {return _storage._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  mutating func clearCreatedAt() {_storage._createdAt = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id == nil {return false}
      if _storage._author == nil {return false}
      if _storage._location == nil {return false}
      if _storage._icon == nil {return false}
      if _storage._message == nil {return false}
      if _storage._count == nil {return false}
      if _storage._rating == nil {return false}
      if _storage._upVotes == nil {return false}
      if _storage._downVotes == nil {return false}
      if _storage._commentsCount == nil {return false}
      if _storage._createdAt == nil {return false}
      if let v = _storage._author, !v.isInitialized {return false}
      if let v = _storage._location, !v.isInitialized {return false}
      if let v = _storage._icon, !v.isInitialized {return false}
      if let v = _storage._createdAt, !v.isInitialized {return false}
      return true
    }
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt64Field(value: &_storage._id)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._author)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._location)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._icon)
        case 5: try decoder.decodeSingularStringField(value: &_storage._message)
        case 6: try decoder.decodeSingularInt32Field(value: &_storage._count)
        case 7: try decoder.decodeSingularDoubleField(value: &_storage._rating)
        case 8: try decoder.decodeSingularInt32Field(value: &_storage._upVotes)
        case 9: try decoder.decodeSingularInt32Field(value: &_storage._downVotes)
        case 10: try decoder.decodeSingularInt32Field(value: &_storage._commentsCount)
        case 11: try decoder.decodeSingularMessageField(value: &_storage._createdAt)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._id {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 1)
      }
      if let v = _storage._author {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._location {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._icon {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._message {
        try visitor.visitSingularStringField(value: v, fieldNumber: 5)
      }
      if let v = _storage._count {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 6)
      }
      if let v = _storage._rating {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 7)
      }
      if let v = _storage._upVotes {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 8)
      }
      if let v = _storage._downVotes {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 9)
      }
      if let v = _storage._commentsCount {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 10)
      }
      if let v = _storage._createdAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct ConversationMessage: SwiftProtobuf.Message {
  static let protoMessageName: String = "ConversationMessage"

  var id: Int64 {
    get {return _storage._id ?? 0}
    set {_uniqueStorage()._id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  var hasID: Bool {return _storage._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  mutating func clearID() {_storage._id = nil}

  var author: MarkerUser {
    get {return _storage._author ?? MarkerUser()}
    set {_uniqueStorage()._author = newValue}
  }
  /// Returns true if `author` has been explicitly set.
  var hasAuthor: Bool {return _storage._author != nil}
  /// Clears the value of `author`. Subsequent reads from it will return its default value.
  mutating func clearAuthor() {_storage._author = nil}

  var message: String {
    get {return _storage._message ?? String()}
    set {_uniqueStorage()._message = newValue}
  }
  /// Returns true if `message` has been explicitly set.
  var hasMessage: Bool {return _storage._message != nil}
  /// Clears the value of `message`. Subsequent reads from it will return its default value.
  mutating func clearMessage() {_storage._message = nil}

  var icon: Icon {
    get {return _storage._icon ?? Icon()}
    set {_uniqueStorage()._icon = newValue}
  }
  /// Returns true if `icon` has been explicitly set.
  var hasIcon: Bool {return _storage._icon != nil}
  /// Clears the value of `icon`. Subsequent reads from it will return its default value.
  mutating func clearIcon() {_storage._icon = nil}

  var rating: Double {
    get {return _storage._rating ?? 0}
    set {_uniqueStorage()._rating = newValue}
  }
  /// Returns true if `rating` has been explicitly set.
  var hasRating: Bool {return _storage._rating != nil}
  /// Clears the value of `rating`. Subsequent reads from it will return its default value.
  mutating func clearRating() {_storage._rating = nil}

  var upVotes: Int32 {
    get {return _storage._upVotes ?? 0}
    set {_uniqueStorage()._upVotes = newValue}
  }
  /// Returns true if `upVotes` has been explicitly set.
  var hasUpVotes: Bool {return _storage._upVotes != nil}
  /// Clears the value of `upVotes`. Subsequent reads from it will return its default value.
  mutating func clearUpVotes() {_storage._upVotes = nil}

  var downVotes: Int32 {
    get {return _storage._downVotes ?? 0}
    set {_uniqueStorage()._downVotes = newValue}
  }
  /// Returns true if `downVotes` has been explicitly set.
  var hasDownVotes: Bool {return _storage._downVotes != nil}
  /// Clears the value of `downVotes`. Subsequent reads from it will return its default value.
  mutating func clearDownVotes() {_storage._downVotes = nil}

  var createdAt: Timestamp {
    get {return _storage._createdAt ?? Timestamp()}
    set {_uniqueStorage()._createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  var hasCreatedAt: Bool {return _storage._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  mutating func clearCreatedAt() {_storage._createdAt = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id == nil {return false}
      if _storage._author == nil {return false}
      if _storage._message == nil {return false}
      if _storage._rating == nil {return false}
      if _storage._upVotes == nil {return false}
      if _storage._downVotes == nil {return false}
      if _storage._createdAt == nil {return false}
      if let v = _storage._author, !v.isInitialized {return false}
      if let v = _storage._icon, !v.isInitialized {return false}
      if let v = _storage._createdAt, !v.isInitialized {return false}
      return true
    }
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt64Field(value: &_storage._id)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._author)
        case 3: try decoder.decodeSingularStringField(value: &_storage._message)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._icon)
        case 5: try decoder.decodeSingularDoubleField(value: &_storage._rating)
        case 6: try decoder.decodeSingularInt32Field(value: &_storage._upVotes)
        case 7: try decoder.decodeSingularInt32Field(value: &_storage._downVotes)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._createdAt)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._id {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 1)
      }
      if let v = _storage._author {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._message {
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      }
      if let v = _storage._icon {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._rating {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 5)
      }
      if let v = _storage._upVotes {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 6)
      }
      if let v = _storage._downVotes {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 7)
      }
      if let v = _storage._createdAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Conversation: SwiftProtobuf.Message {
  static let protoMessageName: String = "Conversation"

  var id: Int64 {
    get {return _id ?? 0}
    set {_id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  mutating func clearID() {self._id = nil}

  var total: Int32 {
    get {return _total ?? 0}
    set {_total = newValue}
  }
  /// Returns true if `total` has been explicitly set.
  var hasTotal: Bool {return self._total != nil}
  /// Clears the value of `total`. Subsequent reads from it will return its default value.
  mutating func clearTotal() {self._total = nil}

  var messages: [ConversationMessage] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  public var isInitialized: Bool {
    if self._id == nil {return false}
    if self._total == nil {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.messages) {return false}
    return true
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self._id)
      case 2: try decoder.decodeSingularInt32Field(value: &self._total)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.messages)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._id {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 1)
    }
    if let v = self._total {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    }
    if !self.messages.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.messages, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _id: Int64? = nil
  fileprivate var _total: Int32? = nil
}

struct OkResponse: SwiftProtobuf.Message {
  static let protoMessageName: String = "OkResponse"

  var code: Int32 {
    get {return _code ?? 0}
    set {_code = newValue}
  }
  /// Returns true if `code` has been explicitly set.
  var hasCode: Bool {return self._code != nil}
  /// Clears the value of `code`. Subsequent reads from it will return its default value.
  mutating func clearCode() {self._code = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  public var isInitialized: Bool {
    if self._code == nil {return false}
    return true
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self._code)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._code {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _code: Int32? = nil
}

struct ErrorResponse: SwiftProtobuf.Message {
  static let protoMessageName: String = "ErrorResponse"

  var code: Int32 {
    get {return _code ?? 0}
    set {_code = newValue}
  }
  /// Returns true if `code` has been explicitly set.
  var hasCode: Bool {return self._code != nil}
  /// Clears the value of `code`. Subsequent reads from it will return its default value.
  mutating func clearCode() {self._code = nil}

  var message: String {
    get {return _message ?? String()}
    set {_message = newValue}
  }
  /// Returns true if `message` has been explicitly set.
  var hasMessage: Bool {return self._message != nil}
  /// Clears the value of `message`. Subsequent reads from it will return its default value.
  mutating func clearMessage() {self._message = nil}

  var systemMessage: String {
    get {return _systemMessage ?? String()}
    set {_systemMessage = newValue}
  }
  /// Returns true if `systemMessage` has been explicitly set.
  var hasSystemMessage: Bool {return self._systemMessage != nil}
  /// Clears the value of `systemMessage`. Subsequent reads from it will return its default value.
  mutating func clearSystemMessage() {self._systemMessage = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  public var isInitialized: Bool {
    if self._code == nil {return false}
    if self._message == nil {return false}
    return true
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self._code)
      case 2: try decoder.decodeSingularStringField(value: &self._message)
      case 3: try decoder.decodeSingularStringField(value: &self._systemMessage)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._code {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._message {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._systemMessage {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _code: Int32? = nil
  fileprivate var _message: String? = nil
  fileprivate var _systemMessage: String? = nil
}

struct ListMarkersResponse: SwiftProtobuf.Message {
  static let protoMessageName: String = "ListMarkersResponse"

  var total: Int32 {
    get {return _total ?? 0}
    set {_total = newValue}
  }
  /// Returns true if `total` has been explicitly set.
  var hasTotal: Bool {return self._total != nil}
  /// Clears the value of `total`. Subsequent reads from it will return its default value.
  mutating func clearTotal() {self._total = nil}

  var markers: [Marker] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  public var isInitialized: Bool {
    if self._total == nil {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.markers) {return false}
    return true
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self._total)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.markers)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._total {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    }
    if !self.markers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.markers, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _total: Int32? = nil
}

struct MarkerConversationResponse: SwiftProtobuf.Message {
  static let protoMessageName: String = "MarkerConversationResponse"

  var conversation: Conversation {
    get {return _storage._conversation ?? Conversation()}
    set {_uniqueStorage()._conversation = newValue}
  }
  /// Returns true if `conversation` has been explicitly set.
  var hasConversation: Bool {return _storage._conversation != nil}
  /// Clears the value of `conversation`. Subsequent reads from it will return its default value.
  mutating func clearConversation() {_storage._conversation = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._conversation == nil {return false}
      if let v = _storage._conversation, !v.isInitialized {return false}
      return true
    }
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 2: try decoder.decodeSingularMessageField(value: &_storage._conversation)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._conversation {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension Sex: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN_SEX"),
    1: .same(proto: "MALE"),
    2: .same(proto: "FEMALE"),
  ]
}

extension Timestamp: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  func _protobuf_generated_isEqualTo(other: Timestamp) -> Bool {
    if self._value != other._value {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension DevicePlatformType: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  func _protobuf_generated_isEqualTo(other: DevicePlatformType) -> Bool {
    if self._value != other._value {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension AuthProviderType: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  func _protobuf_generated_isEqualTo(other: AuthProviderType) -> Bool {
    if self._value != other._value {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension GeoPoint: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "lon"),
    2: .same(proto: "lat"),
  ]

  func _protobuf_generated_isEqualTo(other: GeoPoint) -> Bool {
    if self._lon != other._lon {return false}
    if self._lat != other._lat {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bound: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "leftTop"),
    2: .same(proto: "rightBottom"),
  ]

  fileprivate class _StorageClass {
    var _leftTop: GeoPoint? = nil
    var _rightBottom: GeoPoint? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _leftTop = source._leftTop
      _rightBottom = source._rightBottom
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Bound) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._leftTop != other_storage._leftTop {return false}
        if _storage._rightBottom != other_storage._rightBottom {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Image: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "url"),
  ]

  func _protobuf_generated_isEqualTo(other: Image) -> Bool {
    if self._url != other._url {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Icon: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "icon"),
    2: .same(proto: "image"),
    3: .same(proto: "emoji"),
  ]

  fileprivate class _StorageClass {
    var _icon: String? = nil
    var _image: Image? = nil
    var _emoji: String? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _icon = source._icon
      _image = source._image
      _emoji = source._emoji
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Icon) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._icon != other_storage._icon {return false}
        if _storage._image != other_storage._image {return false}
        if _storage._emoji != other_storage._emoji {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension AddLocationRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "location"),
  ]

  fileprivate class _StorageClass {
    var _location: GeoPoint? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _location = source._location
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: AddLocationRequest) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._location != other_storage._location {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension AddPushTokenRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "platform"),
    2: .same(proto: "token"),
  ]

  fileprivate class _StorageClass {
    var _platform: DevicePlatformType? = nil
    var _token: String? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _platform = source._platform
      _token = source._token
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: AddPushTokenRequest) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._platform != other_storage._platform {return false}
        if _storage._token != other_storage._token {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension AddPlaceRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "location"),
  ]

  fileprivate class _StorageClass {
    var _location: GeoPoint? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _location = source._location
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: AddPlaceRequest) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._location != other_storage._location {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension AddVisitedPlaceRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "location"),
    2: .same(proto: "accuracy"),
    3: .same(proto: "enterTime"),
    4: .same(proto: "leaveTime"),
  ]

  fileprivate class _StorageClass {
    var _location: GeoPoint? = nil
    var _accuracy: Double? = nil
    var _enterTime: Timestamp? = nil
    var _leaveTime: Timestamp? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _location = source._location
      _accuracy = source._accuracy
      _enterTime = source._enterTime
      _leaveTime = source._leaveTime
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: AddVisitedPlaceRequest) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._location != other_storage._location {return false}
        if _storage._accuracy != other_storage._accuracy {return false}
        if _storage._enterTime != other_storage._enterTime {return false}
        if _storage._leaveTime != other_storage._leaveTime {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension AddAuthRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "provider"),
    2: .same(proto: "id"),
    3: .same(proto: "token"),
    4: .same(proto: "email"),
  ]

  fileprivate class _StorageClass {
    var _provider: AuthProviderType? = nil
    var _id: String? = nil
    var _token: String? = nil
    var _email: String? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _provider = source._provider
      _id = source._id
      _token = source._token
      _email = source._email
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: AddAuthRequest) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._provider != other_storage._provider {return false}
        if _storage._id != other_storage._id {return false}
        if _storage._token != other_storage._token {return false}
        if _storage._email != other_storage._email {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension AddMarkerRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "location"),
    2: .same(proto: "icon"),
    3: .same(proto: "message"),
  ]

  fileprivate class _StorageClass {
    var _location: GeoPoint? = nil
    var _icon: Icon? = nil
    var _message: String? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _location = source._location
      _icon = source._icon
      _message = source._message
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: AddMarkerRequest) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._location != other_storage._location {return false}
        if _storage._icon != other_storage._icon {return false}
        if _storage._message != other_storage._message {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension MarkerUser: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "login"),
    3: .same(proto: "name"),
    4: .same(proto: "avatar"),
    5: .same(proto: "rating"),
  ]

  fileprivate class _StorageClass {
    var _id: Int64? = nil
    var _login: String? = nil
    var _name: String? = nil
    var _avatar: Image? = nil
    var _rating: Double? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _login = source._login
      _name = source._name
      _avatar = source._avatar
      _rating = source._rating
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: MarkerUser) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._id != other_storage._id {return false}
        if _storage._login != other_storage._login {return false}
        if _storage._name != other_storage._name {return false}
        if _storage._avatar != other_storage._avatar {return false}
        if _storage._rating != other_storage._rating {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Marker: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "author"),
    3: .same(proto: "location"),
    4: .same(proto: "icon"),
    5: .same(proto: "message"),
    6: .same(proto: "count"),
    7: .same(proto: "rating"),
    8: .same(proto: "upVotes"),
    9: .same(proto: "downVotes"),
    10: .same(proto: "commentsCount"),
    11: .same(proto: "createdAt"),
  ]

  fileprivate class _StorageClass {
    var _id: Int64? = nil
    var _author: MarkerUser? = nil
    var _location: GeoPoint? = nil
    var _icon: Icon? = nil
    var _message: String? = nil
    var _count: Int32? = nil
    var _rating: Double? = nil
    var _upVotes: Int32? = nil
    var _downVotes: Int32? = nil
    var _commentsCount: Int32? = nil
    var _createdAt: Timestamp? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _author = source._author
      _location = source._location
      _icon = source._icon
      _message = source._message
      _count = source._count
      _rating = source._rating
      _upVotes = source._upVotes
      _downVotes = source._downVotes
      _commentsCount = source._commentsCount
      _createdAt = source._createdAt
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Marker) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._id != other_storage._id {return false}
        if _storage._author != other_storage._author {return false}
        if _storage._location != other_storage._location {return false}
        if _storage._icon != other_storage._icon {return false}
        if _storage._message != other_storage._message {return false}
        if _storage._count != other_storage._count {return false}
        if _storage._rating != other_storage._rating {return false}
        if _storage._upVotes != other_storage._upVotes {return false}
        if _storage._downVotes != other_storage._downVotes {return false}
        if _storage._commentsCount != other_storage._commentsCount {return false}
        if _storage._createdAt != other_storage._createdAt {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ConversationMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "author"),
    3: .same(proto: "message"),
    4: .same(proto: "icon"),
    5: .same(proto: "rating"),
    6: .same(proto: "upVotes"),
    7: .same(proto: "downVotes"),
    8: .same(proto: "createdAt"),
  ]

  fileprivate class _StorageClass {
    var _id: Int64? = nil
    var _author: MarkerUser? = nil
    var _message: String? = nil
    var _icon: Icon? = nil
    var _rating: Double? = nil
    var _upVotes: Int32? = nil
    var _downVotes: Int32? = nil
    var _createdAt: Timestamp? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _author = source._author
      _message = source._message
      _icon = source._icon
      _rating = source._rating
      _upVotes = source._upVotes
      _downVotes = source._downVotes
      _createdAt = source._createdAt
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: ConversationMessage) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._id != other_storage._id {return false}
        if _storage._author != other_storage._author {return false}
        if _storage._message != other_storage._message {return false}
        if _storage._icon != other_storage._icon {return false}
        if _storage._rating != other_storage._rating {return false}
        if _storage._upVotes != other_storage._upVotes {return false}
        if _storage._downVotes != other_storage._downVotes {return false}
        if _storage._createdAt != other_storage._createdAt {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Conversation: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "total"),
    3: .same(proto: "messages"),
  ]

  func _protobuf_generated_isEqualTo(other: Conversation) -> Bool {
    if self._id != other._id {return false}
    if self._total != other._total {return false}
    if self.messages != other.messages {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension OkResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
  ]

  func _protobuf_generated_isEqualTo(other: OkResponse) -> Bool {
    if self._code != other._code {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ErrorResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "message"),
    3: .same(proto: "systemMessage"),
  ]

  func _protobuf_generated_isEqualTo(other: ErrorResponse) -> Bool {
    if self._code != other._code {return false}
    if self._message != other._message {return false}
    if self._systemMessage != other._systemMessage {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ListMarkersResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "total"),
    2: .same(proto: "markers"),
  ]

  func _protobuf_generated_isEqualTo(other: ListMarkersResponse) -> Bool {
    if self._total != other._total {return false}
    if self.markers != other.markers {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension MarkerConversationResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "conversation"),
  ]

  fileprivate class _StorageClass {
    var _conversation: Conversation? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _conversation = source._conversation
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: MarkerConversationResponse) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._conversation != other_storage._conversation {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
